<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="76" failures="18" errors="0" time="3.237">
  <testsuite name="src\entities\__tests__\CartItem.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-06-25T13:41:23" time="1.974" tests="29">
    <testcase classname="CartItem Entity CartItem 생성" name="유효한 데이터로 CartItem을 생성할 수 있어야 한다" time="0.006">
    </testcase>
    <testcase classname="CartItem Entity CartItem 생성" name="cartId가 비어있으면 에러를 발생시켜야 한다" time="0.016">
    </testcase>
    <testcase classname="CartItem Entity CartItem 생성" name="productId가 비어있으면 에러를 발생시켜야 한다" time="0.001">
    </testcase>
    <testcase classname="CartItem Entity CartItem 생성" name="수량이 0 이하면 에러를 발생시켜야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity CartItem 생성" name="가격이 0 이하면 에러를 발생시켜야 한다" time="0.001">
    </testcase>
    <testcase classname="CartItem Entity 수량 변경" name="수량을 변경할 수 있어야 한다" time="0.001">
    </testcase>
    <testcase classname="CartItem Entity 수량 변경" name="수량을 1로 변경할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 수량 변경" name="수량을 0으로 변경하면 에러를 발생시켜야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 수량 변경" name="음수 수량으로 변경하면 에러를 발생시켜야 한다" time="0.001">
    </testcase>
    <testcase classname="CartItem Entity 수량 변경" name="소수점 수량을 정수로 변환해야 한다" time="0.001">
    </testcase>
    <testcase classname="CartItem Entity 수량 증가" name="기존 수량에 추가 수량을 더할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 수량 증가" name="1씩 여러 번 증가시킬 수 있어야 한다" time="0.001">
    </testcase>
    <testcase classname="CartItem Entity 수량 증가" name="0으로 증가하면 에러를 발생시켜야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 수량 증가" name="음수로 증가하면 에러를 발생시켜야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 수량 증가" name="소수점 증가량을 정수로 변환해야 한다" time="0.001">
    </testcase>
    <testcase classname="CartItem Entity 가격 계산" name="소계를 정확히 계산해야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 가격 계산" name="높은 가격 상품의 소계를 계산해야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 가격 계산" name="소수점 가격도 정확히 계산해야 한다" time="0.001">
    </testcase>
    <testcase classname="CartItem Entity 도메인 규칙" name="수량이 유효한지 확인할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 도메인 규칙" name="같은 상품인지 확인할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 도메인 규칙" name="상품 정보를 요약할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 도메인 규칙" name="최대 수량 제한을 확인할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 데이터 변환" name="JSON으로 직렬화할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 데이터 변환" name="업데이트 가능한 필드만 추출할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 에러 처리" name="생성자에 null/undefined 값이 들어오면 에러를 발생시켜야 한다" time="0.001">
    </testcase>
    <testcase classname="CartItem Entity 에러 처리" name="매우 큰 수량에도 올바르게 동작해야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 에러 처리" name="매우 높은 가격에도 올바르게 동작해야 한다" time="0.001">
    </testcase>
    <testcase classname="CartItem Entity 시간 관련" name="추가된 시간을 올바르게 반환해야 한다" time="0">
    </testcase>
    <testcase classname="CartItem Entity 시간 관련" name="생성 시간과 현재 시간 차이를 계산할 수 있어야 한다" time="0">
    </testcase>
  </testsuite>
  <testsuite name="src\entities\__tests__\Cart.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-06-25T13:41:23" time="2.042" tests="29">
    <testcase classname="Cart Entity Cart 생성" name="비로그인 사용자용 빈 장바구니를 생성할 수 있어야 한다" time="0.01">
    </testcase>
    <testcase classname="Cart Entity Cart 생성" name="로그인 사용자용 빈 장바구니를 생성할 수 있어야 한다" time="0.001">
    </testcase>
    <testcase classname="Cart Entity Cart 생성" name="userId와 sessionId가 모두 없으면 에러를 발생시켜야 한다" time="0.017">
    </testcase>
    <testcase classname="Cart Entity 상품 추가" name="새로운 상품을 장바구니에 추가할 수 있어야 한다" time="0.002">
    </testcase>
    <testcase classname="Cart Entity 상품 추가" name="같은 상품을 다시 추가하면 수량이 증가해야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 상품 추가" name="다른 상품들을 추가할 수 있어야 한다" time="0.001">
    </testcase>
    <testcase classname="Cart Entity 상품 추가" name="수량이 0 이하면 에러를 발생시켜야 한다" time="0.002">
    </testcase>
    <testcase classname="Cart Entity 상품 추가" name="가격이 0 이하면 에러를 발생시켜야 한다" time="0.001">
    </testcase>
    <testcase classname="Cart Entity 상품 추가" name="productId가 비어있으면 에러를 발생시켜야 한다" time="0.001">
    </testcase>
    <testcase classname="Cart Entity 상품 제거" name="장바구니에서 상품을 제거할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 상품 제거" name="존재하지 않는 상품 제거 시 에러를 발생시켜야 한다" time="0.001">
    </testcase>
    <testcase classname="Cart Entity 상품 제거" name="모든 상품을 제거하면 빈 장바구니가 되어야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 수량 변경" name="상품 수량을 변경할 수 있어야 한다" time="0.001">
    </testcase>
    <testcase classname="Cart Entity 수량 변경" name="수량을 0으로 변경하면 상품이 제거되어야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 수량 변경" name="존재하지 않는 상품의 수량 변경 시 에러를 발생시켜야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 수량 변경" name="음수 수량으로 변경 시 에러를 발생시켜야 한다" time="0.001">
    </testcase>
    <testcase classname="Cart Entity 장바구니 이전 (sessionId → userId)" name="세션 장바구니를 사용자 장바구니로 이전할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 장바구니 이전 (sessionId → userId)" name="이미 사용자 장바구니인 경우 에러를 발생시켜야 한다" time="0.001">
    </testcase>
    <testcase classname="Cart Entity 장바구니 이전 (sessionId → userId)" name="빈 userId로 이전 시 에러를 발생시켜야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 장바구니 병합" name="다른 장바구니와 병합할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 장바구니 병합" name="빈 장바구니와 병합해도 변화가 없어야 한다" time="0.001">
    </testcase>
    <testcase classname="Cart Entity 장바구니 비우기" name="장바구니를 비울 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 장바구니 비우기" name="이미 빈 장바구니를 비워도 문제없어야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 도메인 규칙" name="특정 상품이 장바구니에 있는지 확인할 수 있어야 한다" time="0.001">
    </testcase>
    <testcase classname="Cart Entity 도메인 규칙" name="특정 상품의 수량을 조회할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 도메인 규칙" name="장바구니 총 상품 종류 수를 조회할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 도메인 규칙" name="장바구니가 비어있는지 확인할 수 있어야 한다" time="0">
    </testcase>
    <testcase classname="Cart Entity 업데이트 시간" name="상품 추가 시 업데이트 시간이 변경되어야 한다" time="0.026">
    </testcase>
    <testcase classname="Cart Entity 업데이트 시간" name="상품 제거 시 업데이트 시간이 변경되어야 한다" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="src\adapters\__tests__\CartRepositoryImpl.test.ts" errors="0" failures="18" skipped="0" timestamp="2025-06-25T13:41:23" time="2.574" tests="18">
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 기본 CRUD 기능" name="새로운 빈 장바구니를 저장할 수 있다" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 기본 CRUD 기능" name="상품이 있는 장바구니를 저장할 수 있다" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 기본 CRUD 기능" name="기존 장바구니를 업데이트할 수 있다" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 기본 CRUD 기능" name="장바구니를 조회할 수 있다" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 기본 CRUD 기능" name="장바구니를 삭제할 수 있다" time="0.001">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 실무적 쇼핑몰 시나리오" name="같은 상품을 여러 번 추가하면 수량이 증가한다 (일반적인 쇼핑몰 동작)" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 실무적 쇼핑몰 시나리오" name="비로그인 → 로그인 시 장바구니 이전 (실제 쇼핑몰 시나리오)" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 실무적 쇼핑몰 시나리오" name="장바구니 병합 시나리오 (로그인 시 기존 장바구니와 병합)" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 실무적 쇼핑몰 시나리오" name="상품 재고 부족 상황 처리 (현실적 시나리오)" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 성능 및 안정성" name="대량 상품 장바구니 처리 (성능 테스트)" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 성능 및 안정성" name="동시 사용자 시나리오 (부하 테스트)" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 성능 및 안정성" name="데이터 무결성 검증 (CASCADE 삭제)" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 에러 처리" name="잘못된 UUID로 조회 시 null 반환" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 에러 처리" name="존재하지 않는 사용자 조회 시 null 반환" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 에러 처리" name="존재하지 않는 세션 조회 시 null 반환" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 에러 처리" name="존재하지 않는 장바구니 삭제 시 오류 없이 처리" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 실무적 검증" name="장바구니 저장 후 조회 시 데이터 일치" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
    <testcase classname="CartRepositoryImpl - 실무 중심 테스트 실무적 검증" name="사용자별 최신 장바구니 조회" time="0">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1712:7)</failure>
    </testcase>
  </testsuite>
</testsuites>